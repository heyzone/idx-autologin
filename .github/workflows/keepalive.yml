name: Keepalive Workflow

on:
  push:
    branches: [ main ]
  schedule:
    # 每 30 分钟运行，CST 时间 21:00–次日 12:30（CDT 8:00–23:30）
    - cron: '*/30 21-23,0-12 * * *'
  workflow_dispatch:

jobs:
  keepalive:
    runs-on: ubuntu-22.04  # 固定版本以确保兼容性

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update || { echo "apt-get update failed"; exit 1; }
          sudo apt-get install -y \
            curl wget gnupg \
            libgtk-3-0 libgbm1 libasound2 libxss1 \
            libatk1.0-0 libatk-bridge2.0-0 libxtst6 libdrm2 \
            libxcomposite1 libxdamage1 libxfixes3 libxrandr2 \
            libcups2 libxkbcommon0 libpango-1.0-0 libcairo2 \
            libegl1 libglib2.0-0 libnspr4 libnss3 xvfb \
            || { echo "apt-get install failed"; exit 1; }

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright

      - name: Install Playwright browsers
        run: python -m playwright install firefox

      - name: Create playwright.version
        run: |
          if [ ! -f playwright.version ]; then
            echo "1.34.0" > playwright.version
          fi

      - name: Check WEB_URL status and redirection
        env:
          WEB_URL: ${{ secrets.WEB_URL }}
        run: |
          # 使用 curl 检查 HTTP 状态码
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$WEB_URL")
          echo "WEB_URL status code: $HTTP_STATUS"
          echo "HTTP_STATUS=$HTTP_STATUS" >> $GITHUB_ENV

          # 如果状态码不是 200，直接标记需要恢复
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "NEEDS_RECOVERY=true" >> $GITHUB_ENV
            exit 0
          fi

          # 如果状态码是 200，使用 Playwright 检查是否跳转
          cat << 'EOF' > check_redirect.py
          from playwright.sync_api import sync_playwright
          import sys
          def main():
              web_url = sys.argv[1]
              with sync_playwright() as p:
                  browser = p.firefox.launch(headless=True)
                  page = browser.new_page()
                  response = page.goto(web_url, wait_until="networkidle")
                  final_url = page.url
                  browser.close()
                  # 检查最终 URL 是否与初始 URL 一致
                  if final_url != web_url:
                      print(f"Redirection detected: {web_url} -> {final_url}")
                      sys.exit(1)  # 跳转，标记需要恢复
                  else:
                      print("No redirection detected")
                      sys.exit(0)  # 无跳转
          if __name__ == "__main__":
              main()
          EOF

          # 运行 Playwright 脚本
          python check_redirect.py "$WEB_URL"
          if [ $? -eq 1 ]; then
            echo "NEEDS_RECOVERY=true" >> $GITHUB_ENV
          else
            echo "NEEDS_RECOVERY=false" >> $GITHUB_ENV
          fi

      - name: Run recovery if status is not 200 or redirected
        if: env.HTTP_STATUS != '200' || env.NEEDS_RECOVERY == 'true'
        env:
          COOK_URL: ${{ secrets.COOK_URL }}
          GOOGLE_PW: ${{ secrets.GOOGLE_PW }}
          APP_URL: ${{ secrets.APP_URL }}
        run: |
          # 下载 google_cookies.json
          curl -s -L "$COOK_URL" -o google_cookies.json
          if [ -f google_cookies.json ]; then
            echo "Successfully downloaded google_cookies.json"
          else
            echo "Error: Failed to download google_cookies.json"
            exit 1
          fi
          
          # 运行 main.py
          python main.py

      - name: Skip recovery if URL is accessible and not redirected
        if: env.HTTP_STATUS == '200' && env.NEEDS_RECOVERY == 'false'
        run: echo "URL is accessible and not redirected, no need to run recovery script"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip/
            ~/.cache/ms-playwright/
            google_cookies.json
          key: ${{ github.ref_name }}-cache
          restore-keys: ${{ github.ref_name }}-cache-

      - name: Commit google_cookies.json
        if: env.HTTP_STATUS != '200' || env.NEEDS_RECOVERY == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add google_cookies.json
          git commit -m "Update google_cookies.json" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
